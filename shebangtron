#!/usr/bin/env python

""" This script is intended to fixup the shebang paths on scripts installed via
EUPS distrib "tarball" packages.  The assumption is that an end-user will
invoke it as a manual post-install step on OSX systems with SIP installed.
"""

from __future__ import absolute_import, print_function

import io
import locale
import mmap
import os.path
import re
import stat
import sys
from subprocess import check_output
from distutils.spawn import find_executable

# lifted from conda-build/conda_build/os_utils/elf.py
from os.path import islink, isfile

# extensions which are assumed to belong to non-ELF files
ELF_NO_EXT = (
    '.py', '.pyc', '.pyo', '.h', '.a', '.c', '.txt', '.html',
    '.xml', '.png', '.jpg', '.gif',
    '.o'  # ELF but not what we are looking for
)

ELF_MAGIC = b'\x7fELF'


def is_elf(path):
    if path.endswith(ELF_NO_EXT) or islink(path) or not isfile(path):
        return False
    with open(path, 'rb') as fi:
        head = fi.read(4)
    return bool(head == ELF_MAGIC)


# /elf.py

# lifted from conda-build/conda_build/os_utils/macho.py
MACHO_NO_EXT = (
    '.py', '.pyc', '.pyo', '.h', '.a', '.c', '.txt', '.html',
    '.xml', '.png', '.jpg', '.gif', '.class',
)

MACHO_MAGIC = {
    b'\xca\xfe\xba\xbe': 'MachO-universal',
    b'\xce\xfa\xed\xfe': 'MachO-i386',
    b'\xcf\xfa\xed\xfe': 'MachO-x86_64',
    b'\xfe\xed\xfa\xce': 'MachO-ppc',
    b'\xfe\xed\xfa\xcf': 'MachO-ppc64',
}


def is_macho(path):
    if path.endswith(MACHO_NO_EXT) or islink(path) or not isfile(path):
        return False
    with open(path, 'rb') as fi:
        head = fi.read(4)
    return bool(head in MACHO_MAGIC)


# /macho.py

# lifted from conda-build/conda_build/post.py
SHEBANG_PAT = re.compile(br'^#!.+$', re.M)


def is_obj(path):
    assert sys.platform != 'win32'
    return bool((sys.platform.startswith('linux') and is_elf(path)) or
                (sys.platform == 'darwin' and is_macho(path)))


def fix_shebang(path, build_python):
    # the mmap-fu will fail if a file is not opened for writing -- we can't fix
    # unwritable files so they should be completely skipped.
    if not os.access(path, os.R_OK | os.W_OK):
        return

    if is_obj(path):
        return
    elif os.path.islink(path):
        return
    elif not os.path.isfile(path):
        return

    if os.stat(path).st_size == 0:
        return

    prefenc = locale.getpreferredencoding()
    with io.open(path, encoding=prefenc, mode='r+') as fi:
        try:
            data = fi.read(100)
            fi.seek(0)
        except UnicodeDecodeError:  # file is binary
            return

        # regexp on the memory mapped file so we only read it into
        # memory if the regexp matches.
        try:
            mm = mmap.mmap(fi.fileno(), 0)
        except OSError:
            mm = fi
        m = SHEBANG_PAT.match(mm)
        if not m:
            return

        # skip scripts that use #!/usr/bin/env
        if b'/usr/bin/env' in m.group():
            return

        if not b'python' in m.group():
            return

        data = mm[:]

    # encoding = sys.stdout.encoding or 'utf8'
    encoding = 'utf8'

    # remove the conda prefix logic and set the path to the python interp
    # explicity
    py_exec = (build_python)
    new_data = SHEBANG_PAT.sub(b'#!' + py_exec.encode(encoding), data, count=1)
    if new_data == data:
        return
    print("updating shebang:", path)

    # save original file mode
    mode = os.stat(path).st_mode
    # with io.open(path, 'w', encoding=locale.getpreferredencoding()) as fo:
    with io.open(path, 'w', encoding=encoding) as fo:
        fo.write(new_data.decode(encoding))
    # restore file mode
    os.chmod(path, mode)


# /post.py

try:
    flavor = os.environ['SHTRON_EUPS_FLAVOR']
except KeyError:
    # py >= 3.3 has shutil.which
    eups = find_executable('eups')
    if not eups:
        raise RuntimeError('unable to find eups command')

    flavor = check_output([eups, "flavor"])
    if not flavor:
        raise RuntimeError('eups flavor sub-command may be broken')

    flavor = flavor.decode('utf-8')

# remove newline from eups output
flavor = flavor.rstrip()

try:
    eups_path = os.environ['EUPS_PATH']
except KeyError:
    raise RuntimeError('required environment variable EUPS_PATH is missing')

prod_install_path = os.path.join(eups_path, flavor)
# sanity check
if not os.path.isdir(prod_install_path):
    raise RuntimeError('EUPS product install path is missing')

# fully qualified path to new shebang interp
try:
    py = os.environ['SHTRON_PYTHON']
except KeyError:
    py = sys.executable

for root, dirs, files in os.walk(prod_install_path):
    for f in files:
        path = os.path.join(root, f)
        fix_shebang(path, py)
